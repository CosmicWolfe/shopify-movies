{"version":3,"sources":["AppConstants.tsx","Header/Header.tsx","Filters/Filters.tsx","ShowInfoModal/ShowInfoModal.tsx","ShowsTable/ShowsTable.tsx","SearchAndNominations/SearchAndNominations.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["API_KEY","OMDB_URL","INITIAL_SHOW_INFO_MODAL_DATA","Title","Type","Year","imdbRating","Genre","Plot","Poster","INITIAL_NOMINATIONS","HeaderContainer","styled","div","Header","FilterRow","FilterBorder","SearchFilterWrapper","FilterWrapper","Filters","searchFilters","setYearFilter","setTitleFilter","setTypeFilter","InputLabel","htmlFor","Input","id","onChange","event","target","value","type","s","startAdornment","InputAdornment","position","style","width","required","y","FormControl","variant","className","Select","MenuItem","ModalBackground","ModalContainer","VerticalDiv","ShowPoster","img","Spacer","ShowInfoModal","isOpen","setIsOpen","imdbID","useState","showData","setShowData","modalContainerRef","useRef","useEffect","url","axios","get","then","response","data","console","error","onClick","current","modalContainerRect","getBoundingClientRect","clientX","x","clientY","height","ref","src","toUpperCase","substr","StyledButton","Button","CapitalizedSpan","span","ClickableTableCell","TableCell","StyledInfoIcon","InfoIcon","Row","show","nominations","handleRemoveNomination","handleAddNomination","openShowInfoModal","actionButton","disabled","length","map","nomination","includes","Fragment","TableRow","component","scope","align","TableWrapper","CircularProgressWrapper","ShowsTable","shows","isLoadingSearchResults","page","totalResults","setPageFilter","isShowInfoModalOpen","setIsShowInfoModalOpen","infoModalImdbID","setInfoModalImdbID","TableContainer","Paper","Table","size","TableHead","TableBody","CircularProgress","TablePagination","rowsPerPageOptions","count","rowsPerPage","onChangePage","newPage","HorizontalDiv","HorizontalSpacer","VerticalSpacer","SearchAndNominations","searchResults","searchQuery","isSuccessSnackbarOpen","setIsSuccessSnackbarOpen","defaultValue","key","stickyValue","window","localStorage","getItem","JSON","parse","setValue","setItem","stringify","useStickyState","setNominations","addNomination","removeNomination","filter","handleCloseSuccessSnackbar","Snackbar","open","autoHideDuration","onClose","severity","Body","App","latestApiCall","Date","now","isFailureSnackbarOpen","setIsFailureSnackbarOpen","isInformationSnackbarOpen","setIsInformationSnackbarOpen","snackbarInfo","setSnackbarInfo","setIsLoadingSearchResults","Search","Response","setSearchResults","apikey","setBySearchParams","handleCloseFailureSnackbar","handleCloseInformationSnackbar","resetSearchResults","searchParams","params","undefined","constructApiURL","onChangeTime","setTimeout","title","newSearchFilter","year","Number","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.621a4072.chunk.js","sourcesContent":["export const API_KEY = \"507fa2b7\";\nexport const OMDB_URL = \"https://www.omdbapi.com\";\n\nexport type ShowType = \"movie\" | \"series\" | \"episode\" | \"\";\n\nexport interface BySearchParams {\n  s: string;\n  page: number;\n  apikey: string;\n  type: ShowType;\n  y?: number;\n}\n\nexport interface ByIDParams {\n  i: string;\n}\n\nexport interface Show {\n  Title: string;\n  Year: string;\n  imdbID: string;\n  Type: ShowType;\n}\n\nexport interface ShowData {\n  Title: string;\n  Year: string;\n  imdbRating: string;\n  Poster: string;\n  Plot: string;\n  Genre: string;\n  Type: ShowType;\n}\n\nexport interface SearchResult {\n  Search: Show[];\n  totalResults: string;\n  Response: \"True\" | \"False\";\n}\n\nexport const DEBOUNCE_TIME = 500;\n\n// (:\nexport const INITIAL_SHOW_INFO_MODAL_DATA : ShowData = {\n    Title: \"Title\",\n    Type: \"movie\",\n    Year: \"2021\",\n    imdbRating: \"10\",\n    Genre: \"Adventure\",\n    Plot: \"Jamie becomes an intern at Shopify for Fall 2021?\",\n    Poster: \"N/A\",\n}\n\nexport const INITIAL_SEARCH_QUERY = 'Jamie';\n\n// :)\nexport const INITIAL_NOMINATIONS : Show[] = [\n    {\"Title\":\"Jamie\",\"Year\":\"2016\",\"imdbID\":\"tt5684820\",\"Type\":\"movie\"},\n    {\"Title\":\"The Intern\",\"Year\":\"2015\",\"imdbID\":\"tt2361509\",\"Type\":\"movie\"},\n    {\"Title\":\"The Shop\",\"Year\":\"2018-\",\"imdbID\":\"tt8755712\",\"Type\":\"series\"}, // Closest I could get to Shopify XD\n    {\"Title\":\"Fall\",\"Year\":\"1997\",\"imdbID\":\"tt0119098\",\"Type\":\"movie\"},\n    {\"Title\":\"2021\",\"Year\":\"2013\",\"imdbID\":\"tt2243215\",\"Type\":\"movie\"},\n];","import styled from \"styled-components\";\n\nconst HeaderContainer = styled.div`\n  width: calc(100% - 32px);\n  background-color: #191970;\n  color: white;\n  padding: 16px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 32px;\n  elevation: 8px;\n`;\n\nconst Header = () => {\n  return (\n    <HeaderContainer>\n      <b>The Shoppies</b>\n    </HeaderContainer>\n  );\n};\n\nexport default Header;\n","import { BySearchParams, ShowType } from \"../AppConstants\";\nimport styled from \"styled-components\";\nimport { FormControl, Input, InputAdornment, InputLabel, MenuItem, Select } from \"@material-ui/core\";\nimport SearchIcon from '@material-ui/icons/Search';\n\nconst FilterRow = styled.div`\n  display: flex;\n\n  @media screen and (max-width: 850px) {\n    flex-wrap: wrap;\n  }\n\n  @media screen and (min-width: 850px) {\n    flex-direction: row;\n    width: 100%;\n    align-items: center;\n  }\n`;\n\nconst FilterBorder = styled.div`\n  padding: 12px;\n  border-style: solid;\n  border-width: 2px;\n  border-color: black;\n  border-radius: 8px;\n  background-color: aliceblue;\n`;\n\nconst SearchFilterWrapper = styled.div`\n  padding-right: 32px;\n  padding-top: 16px;\n  width: 400px;\n`;\n\nconst FilterWrapper = styled.div`\n  padding-right: 32px;\n  padding-top: 16px;\n  width: 150px;\n`;\n\ninterface FilterProps {\n  searchFilters: BySearchParams;\n  setYearFilter: (year: number) => void;\n  setTitleFilter: (title: string) => void;\n  setTypeFilter: (type: ShowType) => void;\n}\n\nconst Filters = ({\n  searchFilters,\n  setYearFilter,\n  setTitleFilter,\n  setTypeFilter,\n}: FilterProps) => {\n  const handleTitleChange = (event: any) => {\n    setTitleFilter(event.target.value);\n  };\n\n  const handleYearChange = (event: any) => {\n    setYearFilter(event.target.value);\n  };\n\n  const handleTypeChange = (event: any) => {\n    setTypeFilter(event.target.value);\n  };\n\n  return (\n    <>\n      <FilterRow>\n        <SearchFilterWrapper>\n          <FilterBorder>\n            <InputLabel htmlFor=\"search-input\">Search by show title</InputLabel>\n            <Input\n              id=\"search-input\"\n              onChange={handleTitleChange}\n              type={\"search\"}\n              value={searchFilters.s}\n              startAdornment={\n                <InputAdornment position=\"start\">\n                  <SearchIcon />\n                </InputAdornment>\n              }\n              style={{width: 376}}\n              required={true}\n            />\n          </FilterBorder>\n        </SearchFilterWrapper>\n        <FilterWrapper>\n          <FilterBorder>\n            <InputLabel htmlFor=\"year-input\">Release Year</InputLabel>\n            <Input\n              id=\"year-input\"\n              onChange={handleYearChange}\n              type={\"number\"}\n              value={searchFilters.y}\n              style={{width: 126}}\n            />\n          </FilterBorder>\n        </FilterWrapper>\n        <FilterWrapper>\n          <FilterBorder>\n            <FormControl variant=\"standard\" style={{width: 126}}>\n              <div className={'MuiFormLabel-root MuiInputLabel-root MuiInputLabel-animated'}>\n                Show Type\n              </div>\n              <Select value={searchFilters.type} onChange={handleTypeChange}>\n                <MenuItem value={''}>\n                  <em>None</em>\n                </MenuItem>\n                <MenuItem value={\"movie\"}>Movie</MenuItem>\n                <MenuItem value={\"series\"}>Series</MenuItem>\n                <MenuItem value={\"episode\"}>Episode</MenuItem>\n              </Select>\n            </FormControl>\n          </FilterBorder>\n        </FilterWrapper>\n\n\n      </FilterRow>\n    </>\n  );\n};\nexport default Filters;\n","import axios from \"axios\";\nimport { useEffect, useRef, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { API_KEY, INITIAL_SHOW_INFO_MODAL_DATA, OMDB_URL, ShowData } from \"../AppConstants\";\n\nconst ModalBackground = styled.div`\n  z-index: 10000;\n  background-color: rgba(0, 0, 0, 0.5);\n  width: 100%;\n  height: 100%;\n  position: fixed;\n  top: 0;\n  left: 0;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst ModalContainer = styled.div`\n  padding: 16px;\n  background-color: white;\n  width: 70%;\n  height: 70%;\n  display: flex;\n  flex-direction: row;\n  overflow-y: scroll;\n`;\n\nconst VerticalDiv = styled.div`\n  display: flex;\n  flex-direction: column;\n  max-width: 65%;\n`;\n\nconst ShowPoster = styled.img`\n  display: block;\n  width: 100%;\n  height: auto;\n  padding-top: 8px;\n  padding-bottom: 16px;\n`;\n\nconst Title = styled.div`\n  font-size: 24px;\n  padding-bottom: 8px;\n`;\n\nconst Spacer = styled.div`\n  height: 8px;\n  width: 24px;\n`;\n\ninterface ShowInfoModalProps {\n  isOpen: boolean;\n  setIsOpen: (isOpen: boolean) => void;\n  imdbID: string;\n}\n\nconst ShowInfoModal = ({ isOpen, setIsOpen, imdbID }: ShowInfoModalProps) => {\n  const [showData, setShowData] = useState(INITIAL_SHOW_INFO_MODAL_DATA);\n  const modalContainerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (isOpen && imdbID !== \"\") {\n      const url = `${OMDB_URL}/?apikey=${API_KEY}&i=${imdbID}&plot=full`;\n      axios.get(url).then((response) => {\n        if (response.data[\"Response\"] === \"True\") {\n          setShowData(response.data as ShowData);\n        } else {\n          console.error(\"error getting show data\");\n        }\n      });\n    }\n  }, [isOpen, imdbID]);\n\n  const handleOnClick = (event: React.MouseEvent) => {\n    if (modalContainerRef.current) {\n      const modalContainerRect = modalContainerRef.current.getBoundingClientRect();\n      if (\n        event.clientX < modalContainerRect.x ||\n        event.clientX > modalContainerRect.x + modalContainerRect.width ||\n        event.clientY < modalContainerRect.y ||\n        event.clientY > modalContainerRect.y + modalContainerRect.height\n      ) {\n        setIsOpen(false);\n      }\n    }\n  };\n\n  return (\n    <>\n      {isOpen && (\n        <ModalBackground onClick={handleOnClick}>\n          <ModalContainer ref={modalContainerRef}>\n            <VerticalDiv>\n              <Title>\n                <b>{showData.Title}</b>\n              </Title>\n              <div>\n                <b>Rating:</b> {showData.imdbRating}\n              </div>\n              <ShowPoster src={showData.Poster} />\n            </VerticalDiv>\n            <Spacer />\n            <VerticalDiv>\n              <div>\n                <b>Year:</b> {showData.Year}\n              </div>\n              <Spacer />\n              <div>\n                <b>Genre:</b> {showData.Genre}\n              </div>\n              <Spacer />\n              <div>\n                <b>Type:</b> {showData.Type[0].toUpperCase()}\n                {showData.Type.substr(1)}\n              </div>\n              <Spacer />\n              <div>\n                <b>Plot:</b>\n              </div>\n              <Spacer />\n              <div>{showData.Plot}</div>\n            </VerticalDiv>\n          </ModalContainer>\n        </ModalBackground>\n      )}\n    </>\n  );\n};\n\nexport default ShowInfoModal;\n","import React, { useState } from \"react\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { Show } from \"../AppConstants\";\nimport { Button, TablePagination } from \"@material-ui/core\";\nimport InfoIcon from \"@material-ui/icons/Info\";\nimport styled from \"styled-components\";\nimport ShowInfoModal from \"../ShowInfoModal/ShowInfoModal\";\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst StyledButton = styled(Button)`\n  background-color: #191970;\n  color: white;\n`;\n\nconst CapitalizedSpan = styled.span`\n  text-transform: capitalize;\n`;\n\nconst ClickableTableCell = styled(TableCell)`\n  cursor: pointer;\n`;\n\nconst StyledInfoIcon = styled(InfoIcon)`\n  margin-top: 6px;\n`;\n\ninterface RowProps {\n  show: Show;\n  variant: \"nomination\" | \"search\";\n  nominations: Show[];\n  handleRemoveNomination: (imdbID: string) => void;\n  handleAddNomination: (show: Show) => void;\n  openShowInfoModal: (imdbID: string) => void;\n}\n\nconst Row = ({\n  show,\n  variant,\n  nominations,\n  handleRemoveNomination,\n  handleAddNomination,\n  openShowInfoModal,\n}: RowProps) => {\n  const actionButton = (() => {\n    if (variant === \"nomination\") {\n      return (\n        <StyledButton\n          onClick={() => {\n            handleRemoveNomination(show.imdbID);\n          }}\n          variant={\"contained\"}\n        >\n          <CapitalizedSpan>Remove</CapitalizedSpan>\n        </StyledButton>\n      );\n    } else {\n      const disabled =\n        nominations.length >= 5 ||\n        nominations\n          .map((nomination) => nomination.imdbID)\n          .includes(show.imdbID);\n      return (\n        <StyledButton\n          disabled={disabled}\n          onClick={() => {\n            handleAddNomination(show);\n          }}\n          variant={\"contained\"}\n        >\n          <CapitalizedSpan>Nominate</CapitalizedSpan>\n        </StyledButton>\n      );\n    }\n  })();\n\n  const handleOnClickInfoIcon = () => {\n    openShowInfoModal(show.imdbID);\n  };\n\n  return (\n    <React.Fragment>\n      <TableRow>\n        <ClickableTableCell onClick={handleOnClickInfoIcon}>\n          <StyledInfoIcon />\n        </ClickableTableCell>\n        <TableCell component=\"th\" scope=\"row\">\n          {show.Title}\n        </TableCell>\n        <TableCell align=\"right\">{show.Year}</TableCell>\n        <TableCell align=\"right\">\n          {show.Type[0].toUpperCase()}\n          {show.Type.substr(1)}\n        </TableCell>\n        <TableCell align=\"right\">{actionButton}</TableCell>\n      </TableRow>\n    </React.Fragment>\n  );\n};\n\nconst TableWrapper = styled.div`\n  box-shadow: 0px 2px 1px -1px rgb(0 0 0 / 70%),\n    0px 1px 1px 0px rgb(0 0 0 / 70%), 0px 1px 3px 0px rgb(0 0 0 / 70%);\n  width: 100%;\n  min-width: 500px;\n`;\n\nconst CircularProgressWrapper = styled.div`\n  padding: 36px;\n  display: flex;\n  justify-content: center;\n  width: calc(100%-72px);\n`;\n\ninterface ShowsTableProps {\n  shows: Show[];\n  variant: \"nomination\" | \"search\";\n  nominations: Show[];\n  isLoadingSearchResults: boolean;\n  handleRemoveNomination: (imdbID: string) => void;\n  handleAddNomination: (show: Show) => void;\n  setPageFilter: (page: number) => void;\n  page?: number;\n  totalResults?: number;\n}\n\nconst ShowsTable = ({\n  shows,\n  variant,\n  nominations,\n  isLoadingSearchResults,\n  page,\n  totalResults,\n  setPageFilter,\n  handleRemoveNomination,\n  handleAddNomination,\n}: ShowsTableProps) => {\n  const [isShowInfoModalOpen, setIsShowInfoModalOpen] = useState(false);\n  const [infoModalImdbID, setInfoModalImdbID] = useState(\"\");\n\n  const handleChangePage = (event: any, newPage: number) => {\n    setPageFilter(newPage + 1);\n  };\n\n  const openShowInfoModal = (imdbID: string) => {\n    setInfoModalImdbID(imdbID);\n    setIsShowInfoModalOpen(true);\n  };\n\n  return (\n    <TableWrapper>\n      <TableContainer component={Paper}>\n        <Table size=\"small\">\n          <TableHead>\n            <TableRow>\n              <TableCell></TableCell>\n              <TableCell>Title</TableCell>\n              <TableCell align=\"right\">Year</TableCell>\n              <TableCell align=\"right\">Type</TableCell>\n              <TableCell align=\"right\"></TableCell>\n            </TableRow>\n          </TableHead>\n          {!isLoadingSearchResults && (\n            <TableBody>\n              {shows.map((show) => (\n                <Row\n                  key={show.imdbID}\n                  show={show}\n                  variant={variant}\n                  nominations={nominations}\n                  handleRemoveNomination={handleRemoveNomination}\n                  handleAddNomination={handleAddNomination}\n                  openShowInfoModal={openShowInfoModal}\n                />\n              ))}\n            </TableBody>\n          )}\n        </Table>\n        {isLoadingSearchResults && (\n          <CircularProgressWrapper>\n            <CircularProgress size={100}/>\n          </CircularProgressWrapper>\n        )}\n        {variant === \"search\" && (\n          <TablePagination\n            rowsPerPageOptions={[10]}\n            component=\"div\"\n            count={totalResults as number}\n            rowsPerPage={10}\n            page={(page as number) - 1}\n            onChangePage={handleChangePage}\n          />\n        )}\n      </TableContainer>\n      <ShowInfoModal\n        isOpen={isShowInfoModalOpen}\n        setIsOpen={setIsShowInfoModalOpen}\n        imdbID={infoModalImdbID}\n      />\n    </TableWrapper>\n  );\n};\n\nexport default ShowsTable;\n","import { Snackbar } from \"@material-ui/core\";\nimport { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { INITIAL_NOMINATIONS, Show } from \"../AppConstants\";\nimport ShowsTable from \"../ShowsTable/ShowsTable\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\n\nconst HorizontalDiv = styled.div`\n  display: flex;\n  @media screen and (max-width: 1100px) {\n    flex-direction: column;\n  }\n  @media screen and (min-width: 1100px) {\n    flex-direction: row;\n    width: 100%;\n    justify-content: space-between;\n  }\n`;\n\nconst HorizontalSpacer = styled.div`\n  width: 32px;\n  height: 32px;\n`;\n\nconst VerticalSpacer = styled.div`\n  height: 16px;\n`;\n\nconst VerticalDiv = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  align-items: center;\n`;\n\n/**\n * Credit to https://www.joshwcomeau.com/react/persisting-react-state-in-localstorage/\n */\nconst useStickyState = (\n  defaultValue: Show[],\n  key: string\n): [Show[], React.Dispatch<React.SetStateAction<Show[]>>] => {\n  const [value, setValue] = useState(() => {\n    const stickyValue = window.localStorage.getItem(key);\n    return stickyValue !== null\n      ? (JSON.parse(stickyValue) as Show[])\n      : defaultValue;\n  });\n  useEffect(() => {\n    window.localStorage.setItem(key, JSON.stringify(value));\n  }, [key, value]);\n  return [value, setValue];\n};\n\ninterface SearchAndNominationsProps {\n  isLoadingSearchResults: boolean;\n  searchResults: Show[];\n  searchQuery: string;\n  page: number;\n  totalResults: number;\n  setPageFilter: (page: number) => void;\n}\n\nconst SearchAndNominations = ({\n  isLoadingSearchResults,\n  searchResults,\n  searchQuery,\n  page,\n  totalResults,\n  setPageFilter,\n}: SearchAndNominationsProps) => {\n  const [isSuccessSnackbarOpen, setIsSuccessSnackbarOpen] = useState(false);\n  const [nominations, setNominations] = useStickyState(\n    INITIAL_NOMINATIONS,\n    \"nominations\"\n  );\n\n  const addNomination = (show: Show) => {\n    if (nominations.length === 4) {\n      setIsSuccessSnackbarOpen(true);\n    }\n    setNominations([...nominations, show]);\n  };\n\n  const removeNomination = (imdbID: string) => {\n    setNominations(\n      nominations.filter((nomination) => nomination.imdbID !== imdbID)\n    );\n    setIsSuccessSnackbarOpen(false);\n  };\n\n  const handleCloseSuccessSnackbar = () => {\n    setIsSuccessSnackbarOpen(false);\n  };\n\n  return (\n    <HorizontalDiv>\n      <VerticalDiv>\n        <div>\n          <b>Search Results for \"{searchQuery}\"</b>\n        </div>\n        <VerticalSpacer />\n        <ShowsTable\n          variant=\"search\"\n          shows={searchResults}\n          nominations={nominations}\n          handleAddNomination={addNomination}\n          handleRemoveNomination={removeNomination}\n          setPageFilter={setPageFilter}\n          page={page}\n          totalResults={totalResults}\n          isLoadingSearchResults={isLoadingSearchResults}\n        />\n      </VerticalDiv>\n      <HorizontalSpacer />\n      <VerticalDiv>\n        <div>\n          <b>Nominations</b>\n        </div>\n        <VerticalSpacer />\n        <ShowsTable\n          variant=\"nomination\"\n          shows={nominations}\n          handleAddNomination={addNomination}\n          handleRemoveNomination={removeNomination}\n          nominations={nominations}\n          setPageFilter={setPageFilter}\n          isLoadingSearchResults={false}\n        />\n      </VerticalDiv>\n      <Snackbar\n        open={isSuccessSnackbarOpen}\n        autoHideDuration={5000}\n        onClose={handleCloseSuccessSnackbar}\n      >\n        <MuiAlert onClose={handleCloseSuccessSnackbar} severity=\"success\">\n          5 shows up for nomination!\n        </MuiAlert>\n      </Snackbar>\n    </HorizontalDiv>\n  );\n};\n\nexport default SearchAndNominations;\n","import \"./App.css\";\nimport {\n  API_KEY,\n  OMDB_URL,\n  BySearchParams,\n  SearchResult,\n  ShowType,\n  INITIAL_SEARCH_QUERY,\n  DEBOUNCE_TIME,\n} from \"./AppConstants\";\nimport { useEffect, useRef, useState } from \"react\";\nimport axios from \"axios\";\nimport Header from \"./Header/Header\";\nimport Filters from \"./Filters/Filters\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport styled from \"styled-components\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\nimport SearchAndNominations from \"./SearchAndNominations/SearchAndNominations\";\n\nconst Body = styled.div`\n  padding: 24px;\n`;\n\nconst Spacer = styled.div`\n  height: 24px;\n`;\n\nfunction App() {\n  // Keeps track of when the latest API call happened (for debouncing)\n  const latestApiCall = useRef<number>(Date.now());\n  \n  // Snackbar states\n  const [isFailureSnackbarOpen, setIsFailureSnackbarOpen] = useState(false);\n  const [isInformationSnackbarOpen, setIsInformationSnackbarOpen] = useState(\n    false\n  );\n  const [snackbarInfo, setSnackbarInfo] = useState(\"Too many results.\");\n\n  // Searching and filtering states\n  const [isLoadingSearchResults, setIsLoadingSearchResults] = useState(false);\n  const [searchResults, setSearchResults] = useState({\n    Search: [],\n    totalResults: \"0\",\n    Response: \"False\",\n  } as SearchResult);\n  const [searchFilters, setBySearchParams] = useState({\n    s: INITIAL_SEARCH_QUERY,\n    page: 1,\n    apikey: API_KEY,\n    type: '',\n  } as BySearchParams);\n\n  // For closing the snackbars\n  const handleCloseFailureSnackbar = () => {\n    setIsFailureSnackbarOpen(false);\n  };\n  const handleCloseInformationSnackbar = () => {\n    setIsInformationSnackbarOpen(false);\n  };\n\n  // Functions to set the filters\n  const setYearFilter = (year: number) => {\n    const newSearchFilter = {\n      ...searchFilters,\n      y: year,\n      page: 1,\n    };\n    setBySearchParams(newSearchFilter);\n    resetSearchResults(newSearchFilter);\n  };\n  const setTitleFilter = (title: string) => {\n    const newSearchFilter = {\n      ...searchFilters,\n      s: title,\n      page: 1,\n    };\n    setBySearchParams(newSearchFilter);\n    resetSearchResults(newSearchFilter);\n  };\n  const setTypeFilter = (type: ShowType) => {\n    const newSearchFilter = {\n      ...searchFilters,\n      type: type,\n      page: 1,\n    };\n    setBySearchParams(newSearchFilter);\n    resetSearchResults(newSearchFilter);\n  };\n  const setPageFilter = (page: number) => {\n    const newSearchFilter = {\n      ...searchFilters,\n      page: page,\n    };\n    setBySearchParams(newSearchFilter);\n    resetSearchResults(newSearchFilter);\n  };\n\n  // Helper function to construct the url to send the get request\n  const constructApiURL = (searchFilters: BySearchParams) => {\n    const searchParams = (() => {\n      let params = `s=${searchFilters.s}&page=${searchFilters.page}&apikey=${searchFilters.apikey}`;\n      if (searchFilters.y !== undefined) {\n        params = `${params}&y=${searchFilters.y}`;\n      }\n      if (searchFilters.type !== '') {\n        params = `${params}&type=${searchFilters.type}`;\n      }\n      return params;\n    })();\n    return `${OMDB_URL}/?${searchParams}`;\n  };\n\n  // A debounced function to make the API call for the search results\n  // based on the search filters passed as parameters\n  const resetSearchResults = (searchFilters: BySearchParams) => {\n    const url = constructApiURL(searchFilters);\n    const onChangeTime = Date.now();\n    latestApiCall.current = onChangeTime;\n\n    // debouncing\n    setTimeout(() => {\n      if (latestApiCall.current === onChangeTime) {\n        setIsLoadingSearchResults(true);\n        axios.get(url).then((response) => {\n          if (response.data[\"Response\"] === \"True\") {\n            setIsInformationSnackbarOpen(false);\n            setIsFailureSnackbarOpen(false);\n            setSearchResults(response.data);\n          } else {\n            // Error handling\n            const error = response.data[\"Error\"] as string;\n            if (error === \"Too many results.\") {\n              setSnackbarInfo(\"Too many results. Please narrow down your search!\");\n              setIsInformationSnackbarOpen(true);\n            } else if (error.includes(\"not found!\")) {\n              setSnackbarInfo(\"Show not found!\");\n              setIsInformationSnackbarOpen(true);\n            } else if (searchFilters.s === \"\") {\n              setSnackbarInfo(\"Search by show title!\");\n              setIsInformationSnackbarOpen(true);\n            } else {\n              setIsFailureSnackbarOpen(true);\n            }\n    \n            setSearchResults({\n              Search: [],\n              totalResults: \"0\",\n              Response: \"False\",\n            });\n          }\n    \n          setIsLoadingSearchResults(false);\n        });\n      }\n    }, DEBOUNCE_TIME);\n  };\n\n  useEffect(() => {\n    resetSearchResults(searchFilters);\n  }, []);\n\n  return (\n    <>\n      <Header />\n      <Body>\n        <div>\n          <span>Search for your favourite shows by title and filter them by year and type! Nominate 5 shows!</span>\n        </div>\n        <Filters\n          searchFilters={searchFilters}\n          setTitleFilter={setTitleFilter}\n          setYearFilter={setYearFilter}\n          setTypeFilter={setTypeFilter}\n        />\n        <Spacer />\n        <SearchAndNominations\n          isLoadingSearchResults={isLoadingSearchResults}\n          searchResults={searchResults.Search}\n          searchQuery={searchFilters.s}\n          page={searchFilters.page}\n          totalResults={Number(searchResults.totalResults)}\n          setPageFilter={setPageFilter}\n        />\n        <Snackbar\n          open={isFailureSnackbarOpen}\n          autoHideDuration={5000}\n          onClose={handleCloseFailureSnackbar}\n        >\n          <MuiAlert onClose={handleCloseFailureSnackbar} severity=\"error\">\n            Failed to load search results!\n          </MuiAlert>\n        </Snackbar>\n        <Snackbar\n          open={isInformationSnackbarOpen}\n          autoHideDuration={2500}\n          onClose={handleCloseInformationSnackbar}\n        >\n          <MuiAlert onClose={handleCloseInformationSnackbar} severity=\"info\">\n            {snackbarInfo}\n          </MuiAlert>\n        </Snackbar>\n      </Body>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}