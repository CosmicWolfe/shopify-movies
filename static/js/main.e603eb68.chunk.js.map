{"version":3,"sources":["AppConstants.tsx","Header/Header.tsx","Filters/Filters.tsx","ShowInfoModal/ShowInfoModal.tsx","ShowsTable/ShowsTable.tsx","SearchAndNominations/SearchAndNominations.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["API_KEY","OMDB_URL","HeaderContainer","styled","div","Header","FilterRow","FilterWrapper","FilterTextField","TextField","StyledFormControl","FormControl","Filters","searchFilters","setYearFilter","setTitleFilter","setTypeFilter","label","onChange","event","target","value","type","variant","s","y","InputLabel","htmlFor","Select","MenuItem","ModalBackground","ModalContainer","VerticalDiv","ShowPoster","img","Title","Spacer","ShowInfoModal","isOpen","setIsOpen","imdbID","useState","Type","Year","imdbRating","Genre","Plot","Poster","showData","setShowData","modalContainerRef","useRef","useEffect","console","log","url","axios","get","then","response","data","error","onClick","current","modalContainerRect","getBoundingClientRect","clientX","x","width","clientY","height","ref","src","toUpperCase","substr","StyledButton","Button","CapitalizedSpan","span","ClickableTableCell","TableCell","StyledInfoIcon","InfoIcon","Row","show","nominations","handleRemoveNomination","handleAddNomination","openShowInfoModal","actionButton","disabled","length","map","nomination","includes","Fragment","TableRow","component","scope","align","TableWrapper","ShowsTable","shows","page","totalResults","setPageFilter","isShowInfoModalOpen","setIsShowInfoModalOpen","infoModalImdbID","setInfoModalImdbID","TableContainer","Paper","Table","size","TableHead","TableBody","TablePagination","rowsPerPageOptions","count","rowsPerPage","onChangePage","newPage","HorizontalDiv","HorizontalSpacer","VerticalSpacer","SearchAndNominations","searchResults","isSuccessSnackbarOpen","setIsSuccessSnackbarOpen","defaultValue","key","stickyValue","window","localStorage","getItem","JSON","parse","setValue","setItem","stringify","useStickyState","setNominations","addNomination","removeNomination","filter","handleCloseSuccessSnackbar","Snackbar","open","autoHideDuration","onClose","severity","Body","App","isFailureSnackbarOpen","setIsFailureSnackbarOpen","isInformationSnackbarOpen","setIsInformationSnackbarOpen","snackbarInfo","setSnackbarInfo","Search","Response","setSearchResults","apikey","setBySearchParams","resetSearchResults","searchParams","params","undefined","constructApiURL","handleCloseFailureSnackbar","handleCloseInformationSnackbar","title","newSearchFilter","year","Number","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e603eb68.chunk.js","sourcesContent":["export const API_KEY = \"507fa2b7\";\nexport const OMDB_URL = \"http://www.omdbapi.com\";\nexport const OMDB_IMAGE_URL = \"http://img.omdbapi.com\";\n\nexport type ShowType = \"movie\" | \"series\" | \"episode\";\n\nexport interface BySearchParams {\n  s: string;\n  page: number;\n  apikey: string;\n  type?: ShowType;\n  y?: number;\n}\n\nexport interface ByIDParams {\n  i: string;\n}\n\nexport interface Show {\n  Title: string;\n  Year: string;\n  imdbID: string;\n  Type: ShowType;\n}\n\nexport interface ShowData {\n  Title: string;\n  Year: string;\n  imdbRating: string;\n  Poster: string;\n  Plot: string;\n  Genre: string;\n  Type: ShowType;\n}\n\nexport interface SearchResult {\n  Search: Show[];\n  totalResults: string;\n  Response: \"True\" | \"False\";\n}\n","import styled from \"styled-components\";\n\nconst HeaderContainer = styled.div`\n  width: calc(100% - 32px);\n  background-color: #191970;\n  color: white;\n  padding: 16px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 32px;\n  elevation: 8px;\n`;\n\nconst Header = () => {\n  return (\n    <HeaderContainer>\n      <b>The Shoppies</b>\n    </HeaderContainer>\n  );\n};\n\nexport default Header;\n","import { BySearchParams, ShowType } from \"../AppConstants\";\nimport TextField from \"@material-ui/core/TextField\";\nimport styled from \"styled-components\";\nimport { FormControl, InputLabel, MenuItem, Select } from \"@material-ui/core\";\n\nconst FilterRow = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  width: fit-content;\n  width: 100%;\n`;\n\nconst FilterWrapper = styled.div`\n  padding-right: 36px;\n  width: 200px;\n`;\n\nconst FilterTextField = styled(TextField)`\n  width: 100%;\n  background-color: aliceblue;\n`;\n\nconst StyledFormControl = styled(FormControl)`\n  width: 200px;\n  background-color: aliceblue;\n`;\n\ninterface FilterProps {\n  searchFilters: BySearchParams;\n  setYearFilter: (year: number) => void;\n  setTitleFilter: (title: string) => void;\n  setTypeFilter: (type: ShowType) => void;\n}\n\nconst Filters = ({\n  searchFilters,\n  setYearFilter,\n  setTitleFilter,\n  setTypeFilter,\n}: FilterProps) => {\n  const handleTitleChange = (event: any) => {\n    setTitleFilter(event.target.value);\n  };\n\n  const handleYearChange = (event: any) => {\n    setYearFilter(event.target.value);\n  };\n\n  const handleTypeChange = (event: any) => {\n    setTypeFilter(event.target.value);\n  };\n\n  return (\n    <>\n      <FilterRow>\n        <FilterWrapper>\n          <FilterTextField\n            label={\" Search by show title\"}\n            onChange={handleTitleChange}\n            type={\"text\"}\n            variant={\"standard\"}\n            value={searchFilters.s}\n          />\n        </FilterWrapper>\n        <FilterWrapper>\n          <FilterTextField\n            label={\" Filter by year of release\"}\n            onChange={handleYearChange}\n            type={\"number\"}\n            variant={\"standard\"}\n            value={searchFilters.y}\n          />\n        </FilterWrapper>\n        <FilterWrapper>\n          <StyledFormControl variant=\"standard\">\n            <InputLabel htmlFor=\"outlined-select-show-type\">\n              {\" \"}\n              Filter by show type\n            </InputLabel>\n            <Select value={searchFilters.type} onChange={handleTypeChange}>\n              <MenuItem value={\"\"}>\n                <em>None</em>\n              </MenuItem>\n              <MenuItem value={\"movie\"}>Movie</MenuItem>\n              <MenuItem value={\"series\"}>Series</MenuItem>\n              <MenuItem value={\"episode\"}>Episode</MenuItem>\n            </Select>\n          </StyledFormControl>\n        </FilterWrapper>\n      </FilterRow>\n    </>\n  );\n};\nexport default Filters;\n","import axios from \"axios\";\nimport { useEffect, useRef, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { API_KEY, OMDB_URL, ShowData } from \"../AppConstants\";\n\nconst ModalBackground = styled.div`\n  z-index: 10000;\n  background-color: rgba(0, 0, 0, 0.5);\n  width: 100%;\n  height: 100%;\n  position: fixed;\n  top: 0;\n  left: 0;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst ModalContainer = styled.div`\n  padding: 16px;\n  background-color: white;\n  width: 70%;\n  height: 70%;\n  display: flex;\n  flex-direction: row;\n  overflow-y: scroll;\n`;\n\nconst VerticalDiv = styled.div`\n  display: flex;\n  flex-direction: column;\n  max-width: 65%;\n`;\n\nconst ShowPoster = styled.img`\n  display: block;\n  width: 100%;\n  height: auto;\n  padding-top: 8px;\n  padding-bottom: 16px;\n`;\n\nconst Title = styled.div`\n  font-size: 24px;\n  padding-bottom: 8px;\n`;\n\nconst Spacer = styled.div`\n  height: 8px;\n  width: 24px;\n`;\n\ninterface ShowInfoModalProps {\n  isOpen: boolean;\n  setIsOpen: (isOpen: boolean) => void;\n  imdbID: string;\n}\n\nconst ShowInfoModal = ({ isOpen, setIsOpen, imdbID }: ShowInfoModalProps) => {\n  const [showData, setShowData] = useState({\n    Title: \"Title\",\n    Type: \"movie\",\n    Year: \"2020\",\n    imdbRating: \"10\",\n    Genre: \"Action\",\n    Plot: \"Plot\",\n    Poster: \"N/A\",\n  } as ShowData);\n  const modalContainerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    console.log(\"useeffect\", imdbID);\n    if (isOpen && imdbID !== \"\") {\n      console.log(\"in\");\n      const url = `${OMDB_URL}/?apikey=${API_KEY}&i=${imdbID}&plot=full`;\n      axios.get(url).then((response) => {\n        if (response.data[\"Response\"] === \"True\") {\n          setShowData(response.data as ShowData);\n        } else {\n          console.error(\"error getting show data\");\n        }\n      });\n    }\n  }, [isOpen, imdbID]);\n\n  const handleOnClick = (event: React.MouseEvent) => {\n    if (modalContainerRef.current) {\n      const modalContainerRect = modalContainerRef.current.getBoundingClientRect();\n      if (\n        event.clientX < modalContainerRect.x ||\n        event.clientX > modalContainerRect.x + modalContainerRect.width ||\n        event.clientY < modalContainerRect.y ||\n        event.clientY > modalContainerRect.y + modalContainerRect.height\n      ) {\n        setIsOpen(false);\n      }\n    }\n  };\n\n  return (\n    <>\n      {isOpen && (\n        <ModalBackground onClick={handleOnClick}>\n          <ModalContainer ref={modalContainerRef}>\n            <VerticalDiv>\n              <Title>\n                <b>{showData.Title}</b>\n              </Title>\n              <div>\n                <b>Rating:</b> {showData.imdbRating}\n              </div>\n              <ShowPoster src={showData.Poster} />\n            </VerticalDiv>\n            <Spacer />\n            <VerticalDiv>\n              <div>\n                <b>Year:</b> {showData.Year}\n              </div>\n              <Spacer />\n              <div>\n                <b>Genre:</b> {showData.Genre}\n              </div>\n              <Spacer />\n              <div>\n                <b>Type:</b> {showData.Type[0].toUpperCase()}\n                {showData.Type.substr(1)}\n              </div>\n              <Spacer />\n              <div>\n                <b>Plot:</b>\n              </div>\n              <Spacer />\n              <div>{showData.Plot}</div>\n            </VerticalDiv>\n          </ModalContainer>\n        </ModalBackground>\n      )}\n    </>\n  );\n};\n\nexport default ShowInfoModal;\n","import React, { useState } from \"react\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { Show } from \"../AppConstants\";\nimport { Button, TablePagination } from \"@material-ui/core\";\nimport InfoIcon from \"@material-ui/icons/Info\";\nimport styled from \"styled-components\";\nimport ShowInfoModal from \"../ShowInfoModal/ShowInfoModal\";\n\nconst StyledButton = styled(Button)`\n  background-color: #191970;\n  color: white;\n`;\n\nconst CapitalizedSpan = styled.span`\n  text-transform: capitalize;\n`;\n\nconst ClickableTableCell = styled(TableCell)`\n  cursor: pointer;\n`;\n\nconst StyledInfoIcon = styled(InfoIcon)`\n  margin-top: 2px;\n`;\n\ninterface RowProps {\n  show: Show;\n  variant: \"nomination\" | \"search\";\n  nominations: Show[];\n  handleRemoveNomination: (imdbID: string) => void;\n  handleAddNomination: (show: Show) => void;\n  openShowInfoModal: (imdbID: string) => void;\n}\n\nconst Row = ({\n  show,\n  variant,\n  nominations,\n  handleRemoveNomination,\n  handleAddNomination,\n  openShowInfoModal,\n}: RowProps) => {\n  const actionButton = (() => {\n    if (variant === \"nomination\") {\n      return (\n        <StyledButton\n          onClick={() => {\n            handleRemoveNomination(show.imdbID);\n          }}\n          variant={\"contained\"}\n        >\n          <CapitalizedSpan>Remove</CapitalizedSpan>\n        </StyledButton>\n      );\n    } else {\n      const disabled =\n        nominations?.length >= 5 ||\n        nominations\n          ?.map((nomination) => nomination.imdbID)\n          .includes(show.imdbID);\n      return (\n        <StyledButton\n          disabled={disabled}\n          onClick={() => {\n            handleAddNomination(show);\n          }}\n          variant={\"contained\"}\n        >\n          <CapitalizedSpan>Nominate</CapitalizedSpan>\n        </StyledButton>\n      );\n    }\n  })();\n\n  const handleOnClickInfoIcon = () => {\n    console.log(\"on click info icon called\");\n    openShowInfoModal(show.imdbID);\n  };\n\n  return (\n    <React.Fragment>\n      <TableRow>\n        <ClickableTableCell onClick={handleOnClickInfoIcon}>\n          <StyledInfoIcon />\n        </ClickableTableCell>\n        <TableCell component=\"th\" scope=\"row\">\n          {show.Title}\n        </TableCell>\n        <TableCell align=\"right\">{show.Year}</TableCell>\n        <TableCell align=\"right\">\n          {show.Type[0].toUpperCase()}\n          {show.Type.substr(1)}\n        </TableCell>\n        <TableCell align=\"right\">{actionButton}</TableCell>\n      </TableRow>\n    </React.Fragment>\n  );\n};\n\nconst TableWrapper = styled.div`\n  box-shadow: 0px 2px 1px -1px rgb(0 0 0 / 70%),\n    0px 1px 1px 0px rgb(0 0 0 / 70%), 0px 1px 3px 0px rgb(0 0 0 / 70%);\n  width: 100%;\n`;\n\ninterface ShowsTableProps {\n  shows: Show[];\n  variant: \"nomination\" | \"search\";\n  handleRemoveNomination: (imdbID: string) => void;\n  handleAddNomination: (show: Show) => void;\n  setPageFilter: (page: number) => void;\n  nominations: Show[];\n  page?: number;\n  totalResults?: number;\n}\n\nconst ShowsTable = ({\n  shows,\n  variant,\n  nominations,\n  page,\n  totalResults,\n  setPageFilter,\n  handleRemoveNomination,\n  handleAddNomination,\n}: ShowsTableProps) => {\n  const [isShowInfoModalOpen, setIsShowInfoModalOpen] = useState(false);\n  const [infoModalImdbID, setInfoModalImdbID] = useState(\"\");\n\n  const handleChangePage = (event: any, newPage: number) => {\n    setPageFilter(newPage + 1);\n  };\n\n  const openShowInfoModal = (imdbID: string) => {\n    setInfoModalImdbID(imdbID);\n    setIsShowInfoModalOpen(true);\n  };\n\n  return (\n    <TableWrapper>\n      <TableContainer component={Paper}>\n        <Table size=\"small\">\n          <TableHead>\n            <TableRow>\n              <TableCell></TableCell>\n              <TableCell>Title</TableCell>\n              <TableCell align=\"right\">Year</TableCell>\n              <TableCell align=\"right\">Type</TableCell>\n              <TableCell align=\"right\"></TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {shows.map((show) => (\n              <Row\n                key={show.imdbID}\n                show={show}\n                variant={variant}\n                nominations={nominations}\n                handleRemoveNomination={handleRemoveNomination}\n                handleAddNomination={handleAddNomination}\n                openShowInfoModal={openShowInfoModal}\n              />\n            ))}\n          </TableBody>\n        </Table>\n        {variant === \"search\" && (\n          <TablePagination\n            rowsPerPageOptions={[10]}\n            component=\"div\"\n            count={totalResults as number}\n            rowsPerPage={10}\n            page={(page as number) - 1}\n            onChangePage={handleChangePage}\n          />\n        )}\n      </TableContainer>\n      <ShowInfoModal\n        isOpen={isShowInfoModalOpen}\n        setIsOpen={setIsShowInfoModalOpen}\n        imdbID={infoModalImdbID}\n      />\n    </TableWrapper>\n  );\n};\n\nexport default ShowsTable;\n","import { Snackbar } from \"@material-ui/core\";\nimport { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { Show } from \"../AppConstants\";\nimport ShowsTable from \"../ShowsTable/ShowsTable\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\n\nconst HorizontalDiv = styled.div`\n  display: flex;\n  flex-direction: row;\n  width: 100%;\n  justify-content: space-between;\n`;\n\nconst HorizontalSpacer = styled.div`\n  width: 32px;\n`;\n\nconst VerticalSpacer = styled.div`\n  height: 16px;\n`;\n\nconst VerticalDiv = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  align-items: center;\n`;\n\ninterface SearchAndNominationsProps {\n  searchResults: Show[];\n  page: number;\n  totalResults: number;\n  setPageFilter: (page: number) => void;\n}\n\n/**\n * Credit to https://www.joshwcomeau.com/react/persisting-react-state-in-localstorage/\n */\nconst useStickyState = (\n  defaultValue: Show[],\n  key: string\n): [Show[], React.Dispatch<React.SetStateAction<Show[]>>] => {\n  const [value, setValue] = useState(() => {\n    const stickyValue = window.localStorage.getItem(key);\n    return stickyValue !== null\n      ? (JSON.parse(stickyValue) as Show[])\n      : defaultValue;\n  });\n  useEffect(() => {\n    window.localStorage.setItem(key, JSON.stringify(value));\n  }, [key, value]);\n  return [value, setValue];\n};\n\nconst SearchAndNominations = ({\n  searchResults,\n  page,\n  totalResults,\n  setPageFilter,\n}: SearchAndNominationsProps) => {\n  const [isSuccessSnackbarOpen, setIsSuccessSnackbarOpen] = useState(false);\n  const [nominations, setNominations] = useStickyState(\n    [] as Show[],\n    \"nominations\"\n  );\n\n  const addNomination = (show: Show) => {\n    if (nominations.length === 4) {\n      setIsSuccessSnackbarOpen(true);\n    }\n    setNominations([...nominations, show]);\n  };\n\n  const removeNomination = (imdbID: string) => {\n    setNominations(\n      nominations.filter((nomination) => nomination.imdbID !== imdbID)\n    );\n    setIsSuccessSnackbarOpen(false);\n  };\n\n  const handleCloseSuccessSnackbar = () => {\n    setIsSuccessSnackbarOpen(false);\n  };\n\n  return (\n    <HorizontalDiv>\n      <VerticalDiv>\n        <div>\n          <b>Search Results</b>\n        </div>\n        <VerticalSpacer />\n        <ShowsTable\n          variant=\"search\"\n          shows={searchResults}\n          nominations={nominations}\n          handleAddNomination={addNomination}\n          handleRemoveNomination={removeNomination}\n          setPageFilter={setPageFilter}\n          page={page}\n          totalResults={totalResults}\n        />\n      </VerticalDiv>\n      <HorizontalSpacer />\n      <VerticalDiv>\n        <div>\n          <b>Nominations</b>\n        </div>\n        <VerticalSpacer />\n        <ShowsTable\n          variant=\"nomination\"\n          shows={nominations}\n          handleAddNomination={addNomination}\n          handleRemoveNomination={removeNomination}\n          nominations={nominations}\n          setPageFilter={setPageFilter}\n        />\n      </VerticalDiv>\n      <Snackbar\n        open={isSuccessSnackbarOpen}\n        autoHideDuration={5000}\n        onClose={handleCloseSuccessSnackbar}\n      >\n        <MuiAlert onClose={handleCloseSuccessSnackbar} severity=\"success\">\n          5 shows up for nomination!\n        </MuiAlert>\n      </Snackbar>\n    </HorizontalDiv>\n  );\n};\n\nexport default SearchAndNominations;\n","import \"./App.css\";\nimport {\n  API_KEY,\n  OMDB_URL,\n  BySearchParams,\n  SearchResult,\n  ShowType,\n} from \"./AppConstants\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport Header from \"./Header/Header\";\nimport Filters from \"./Filters/Filters\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport styled from \"styled-components\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\nimport SearchAndNominations from \"./SearchAndNominations/SearchAndNominations\";\n\nconst Body = styled.div`\n  padding: 24px;\n`;\n\nconst Spacer = styled.div`\n  height: 24px;\n`;\n\nfunction App() {\n  const [isFailureSnackbarOpen, setIsFailureSnackbarOpen] = useState(false);\n  const [isInformationSnackbarOpen, setIsInformationSnackbarOpen] = useState(\n    false\n  );\n  const [snackbarInfo, setSnackbarInfo] = useState(\"Too many results.\");\n  const [searchResults, setSearchResults] = useState({\n    Search: [],\n    totalResults: \"0\",\n    Response: \"False\",\n  } as SearchResult);\n  const [searchFilters, setBySearchParams] = useState({\n    s: \"\",\n    page: 1,\n    apikey: API_KEY,\n  } as BySearchParams);\n\n  const setYearFilter = (year: number) => {\n    const newSearchFilter = {\n      ...searchFilters,\n      y: year,\n      page: 1,\n    };\n    setBySearchParams(newSearchFilter);\n    resetSearchResults(newSearchFilter);\n  };\n\n  const setTitleFilter = (title: string) => {\n    const newSearchFilter = {\n      ...searchFilters,\n      s: title,\n      page: 1,\n    };\n    setBySearchParams(newSearchFilter);\n    resetSearchResults(newSearchFilter);\n  };\n\n  const setTypeFilter = (type: ShowType) => {\n    const newSearchFilter = {\n      ...searchFilters,\n      type: type,\n      page: 1,\n    };\n    setBySearchParams(newSearchFilter);\n    resetSearchResults(newSearchFilter);\n  };\n\n  const setPageFilter = (page: number) => {\n    const newSearchFilter = {\n      ...searchFilters,\n      page: page,\n    };\n    setBySearchParams(newSearchFilter);\n    resetSearchResults(newSearchFilter);\n  };\n\n  const constructApiURL = (searchFilters: BySearchParams) => {\n    const searchParams = (() => {\n      let params = `s=${searchFilters.s}&page=${searchFilters.page}&apikey=${searchFilters.apikey}`;\n      if (searchFilters.y !== undefined) {\n        params = `${params}&y=${searchFilters.y}`;\n      }\n      if (searchFilters.type !== undefined) {\n        params = `${params}&type=${searchFilters.type}`;\n      }\n      return params;\n    })();\n    return `${OMDB_URL}/?${searchParams}`;\n  };\n\n  const resetSearchResults = (searchFilters: BySearchParams) => {\n    const url = constructApiURL(searchFilters);\n    axios.get(url).then((response) => {\n      if (response.data[\"Response\"] === \"True\") {\n        setIsInformationSnackbarOpen(false);\n        setIsFailureSnackbarOpen(false);\n        setSearchResults(response.data);\n      } else {\n        const error = response.data[\"Error\"] as string;\n        if (error === \"Too many results.\") {\n          setSnackbarInfo(\"Too many results. Please narrow down your search!\");\n          setIsInformationSnackbarOpen(true);\n        } else if (error.includes(\"not found!\")) {\n          setSnackbarInfo(\"Show not found!\");\n          setIsInformationSnackbarOpen(true);\n        } else if (searchFilters.s === \"\") {\n          setSnackbarInfo(\"Search by show title!\");\n          setIsInformationSnackbarOpen(true);\n        } else {\n          setIsFailureSnackbarOpen(true);\n        }\n\n        setSearchResults({\n          Search: [],\n          totalResults: \"0\",\n          Response: \"False\",\n        });\n      }\n    });\n  };\n\n  const handleCloseFailureSnackbar = () => {\n    setIsFailureSnackbarOpen(false);\n  };\n\n  const handleCloseInformationSnackbar = () => {\n    setIsInformationSnackbarOpen(false);\n  };\n\n  return (\n    <>\n      <Header />\n      <Body>\n        <div>\n          <span>Nominate 5 shows!</span>\n        </div>\n        <Spacer />\n        <Filters\n          searchFilters={searchFilters}\n          setTitleFilter={setTitleFilter}\n          setYearFilter={setYearFilter}\n          setTypeFilter={setTypeFilter}\n        />\n        <Spacer />\n        <SearchAndNominations\n          searchResults={searchResults.Search}\n          page={searchFilters.page}\n          totalResults={Number(searchResults.totalResults)}\n          setPageFilter={setPageFilter}\n        />\n        <Snackbar\n          open={isFailureSnackbarOpen}\n          autoHideDuration={5000}\n          onClose={handleCloseFailureSnackbar}\n        >\n          <MuiAlert onClose={handleCloseFailureSnackbar} severity=\"error\">\n            Failed to load search results!\n          </MuiAlert>\n        </Snackbar>\n        <Snackbar\n          open={isInformationSnackbarOpen}\n          autoHideDuration={2500}\n          onClose={handleCloseInformationSnackbar}\n        >\n          <MuiAlert onClose={handleCloseInformationSnackbar} severity=\"info\">\n            {snackbarInfo}\n          </MuiAlert>\n        </Snackbar>\n      </Body>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}